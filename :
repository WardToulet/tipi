import Pipeline from './Pipeline';

export class RoutingTree {
  private root: Node;

  constructor() {
    this.root = { static: {}, dynamic: {}, isVariable: false };
  }

  addRoute(path: string, method: string, pipeline: Pipeline<any, any, any, any>) {
    const routeParts = path.split('/').slice(1);
    let node = this.root;

    for(const part in routeParts) {
      const isDynamic = part.startsWith('@');
      const name = isDynamic ? part.slice(1) : part;

      if(!node[isDynamic ? 'dynamic' : 'static' ][name]) {
        node[isDynamic ? 'dynamic' : 'static'][name] = { static: {}, dynamic: {} };
      }

      node = node[isDynamic[]]

      // // TODO: add variable check
      // if((node.children[part] as (Node | undefined))?.isVariable === isVariable) {
      //   node.children[part] = { children: {}, isVariable };
      // }
      //

    }
  }
}

type Node = {
  static: { [key: string]: (Node | Leaf )},
  dynamic: { [key: string]: (Node | Leaf )},
}

type Leaf = {
  method: string,
  pipeline: Pipeline<any, any, any, any>,
}
